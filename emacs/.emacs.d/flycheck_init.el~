;; emacs customizations
(setq inhibit-startup-message t)
(require 'no-littering)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)

(setq default-tab-width 4)

(menu-bar-mode -1)
(xterm-mouse-mode 1)

(toggle-word-wrap)

(visual-line-mode)

(set-frame-font "Fira Code 10" nil t)

(setq ring-bell-function 'ignore)

(dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

(electric-pair-mode 1)

;; keybindings
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Configures package manager 
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("gnu" . "https://elpa.gnu.org/packages/")
			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; packages

;;; move backup saves elsewhere
(use-package no-littering)

;;; theme
(setq custom-safe-themes t)
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/haki")
(load-theme 'haki)
(set-face-attribute 'haki-region nil :background "#2e8b57" :foreground "#ffffff")
(add-hook 'post-command-hook #'haki-modal-mode-line)
;;;; make theme transparent
(set-frame-parameter nil 'alpha-background 95)

;;; org mode
(use-package org)

;;; autocomplete
(use-package ivy
  :config (ivy-mode 1))

(use-package ivy-rich
  :init (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)))

;;; nice mode line that emulates VIM's
(use-package powerline
  :config (powerline-default-theme))

;;; makes it easier to determine delimiter levels
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;;; key completion
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-ley-idle-delay 0.1))

;;; git
(use-package magit)

;;; scrollbar
(use-package yascroll
  :hook
  (prog-mode . yascroll-bar-mode)
  (text-mode . yascroll-bar-mode))

;;; i am a vim user
(use-package evil
  :ensure t
  :init (setq evil-want-integration t
	      evil-want-keybinding nil)
  :config (add-hook 'neotree-mode-hook
              (lambda ()
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
                (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
                (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
                (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))
  (evil-mode 1))
  ;:hook  
  ;(dired-mode . turn-off-evil-mode) 
  ;(bookmark-bmenu-mode . turn-off-evil-mode) 
  ;(ibuffer-mode . turn-off-evil-mode))

(use-package evil-collection
  :after evil
  :ensure t
  :config (evil-collection-init))

(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode 1))

;;; tree
(use-package neotree
  :config
  (setq neo-window-position 'right)
  (setq neo-window-width 30)
  (setq line-number-mode 0)
  :bind (("<f6>" . neotree)))

;; IDE SHIT

;;; lsp-mode
(add-to-list 'exec-path "/path")
(add-to-list 'exec-path "$HOME/.zvm/bin")
(add-to-list 'exec-path "$HOME/.zvm/self")

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init (setq lsp-keymap-prefix "C-c l")
  :config (setq lsp-prefer-capf t)
  (setq lsp-auto-configure t))

;;;; lsp-doctor recommended optimiztions
(setq gc-cons-threshold 100000000
      read-process-output-max (* 1024 1024))
(setq lsp-print-performance t)

(use-package company
  :commands (company-mode)
  :config
  (setq company-minimum-prefix-length 1
	company-tooltip-limit 5
	company-require-match nil
	company-dabbrev-downcase 0
	company-idle-delay 0
	company-selection-wrap-around 1)
  :hook (prog-mode . company-mode))

(use-package company-quickhelp
  :hook (company-mode . company-quickhelp-mode)
  :config
  (setq company-quickhelp-delay 5))

(use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))

;;; language-specific

;;;; agda

(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))

;;; apl
(use-package gnu-apl-mode)
(use-package dyalog-mode
  :mode "\\.dyalog\\'")

;;; c/c++
(add-hook 'c-mode-hook 'lsp-mode)
(add-hook 'c++-mode-hook 'lsp-mode)

;;;; common lisp
(use-package slime
  :mode "\\.cl\\'"
  :config
  (setq inferior-lisp-program "sbcl")
  (slime-setup '(slime-fancy slime-company)))
(use-package slime-company
  :after (slime company)
  :config (setq slime-company-completion 'fuzzy
                slime-company-after-completion 'slime-company-just-one-space))
(load (expand-file-name "~/Files/src_clisp/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")

(use-package forth-mode
  :commands (forth-mode))

;;;; haskell
(use-package haskell-mode
  :mode "\\.hs\\'"
  :commands (haskell-mode)
  :hook (haskell-mode . lsp)
  (haskell-mode . interactive-haskell-mode)
  )

(use-package lsp-haskell)

;;;; LaTeX
(use-package latex-preview-pane
  :hook (LaTeX-mode . latex-preview-pane-enable))

;;;; ocaml
;; Major mode for OCaml programming
(use-package tuareg
  :ensure t
  :mode (("\\.ocamlinit\\'" . tuareg-mode)))

;; Major mode for editing Dune project files
(use-package dune
  :ensure t)

;; Merlin provides advanced IDE features
(use-package merlin
  :ensure t
  :config
  (add-hook 'tuareg-mode-hook #'merlin-mode)
  (add-hook 'merlin-mode-hook #'company-mode)
  ;; we're using flycheck instead
  (setq merlin-error-after-save nil))

(use-package merlin-eldoc
  :ensure t
  :hook ((tuareg-mode) . merlin-eldoc-setup))

;; This uses Merlin internally
(use-package flycheck-ocaml
  :ensure t
  :config
  (flycheck-ocaml-setup))

(use-package utop
  :ensure t
  :config
  (add-hook 'tuareg-mode-hook #'utop-minor-mode))

;;;; python
(use-package python-mode
  :hook (python-mode . lsp-mode))
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))

(use-package code-cells
  :hook (python-mode . code-cells-mode-maybe))
(use-package elpy
  :hook (python-mode . elpy-mode)
  (python-mode . elpy-enable))

;;;; racket
(use-package racket-mode
  :hook (racket-mode . lsp-mode))

;;; rust
(use-package rust-mode
  :config (add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
  :hook (rust-mode . lsp-mode))

;;;; uxntal
(use-package uxntal-mode)

;;;; zig
(use-package zig-mode
  :hook (zig-mode . lsp-mode))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(haki))
 '(custom-safe-themes
   '("50fc480e40b2b03e4fe9e83f5ceba3fa4d8bc31dac95fa11e73a938da56d7e4c" "6fc9e40b4375d9d8d0d9521505849ab4d04220ed470db0b78b700230da0a86c1" "9ff2a63e7b1dea4bdec5c8ccce2816c7d5f137f0f8daae6e9dc3a5d9d7c95cba" "3f1dcd824a683e0ab194b3a1daac18a923eed4dba5269eecb050c718ab4d5a26" "3039a2b04f05e9e730f23b56a44b9f6c5b40a4eb0bbc0a4b79ddfe7195ee98fd" default))
 '(package-selected-packages
   '(smart-tabs-mode no-littering rust-mode evil-surround evil-collection latex-preview-pane elpy madhat2r-theme uwu-theme tangotango-theme utop darcula-theme timu-macos-theme yascroll neotree evil evil-mode slime-fancy slime-company company-quickhelp gnu-apl-mode dyalog-mode apl-mode zig-mode code-cells python-mode lsp-pyright flycheck-ocaml merlin-eldoc merlin dune tuareg slime forth-mode lsp-haskell haskell-mode company corfu-mode lsp-mode which-key rainbow-delimiters powerline ivy-rich)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;(load-file (let ((coding-system-for-read 'utf-8))
;;                (shell-command-to-string "agda-mode locate")))
(put 'upcase-region 'disabled nil)
